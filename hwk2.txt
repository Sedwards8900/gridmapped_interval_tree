Homework Assignment 2
In this homework assignment, you will be working on creating a spatiotemporal trajectory index called Grid-mapped Interval Trees (G-IT) in Python. Trajectories often represent movement of objects and are one of the most powerful data structures for representing spatiotemporal objects. Below, you will find the data model you are expected to use as well as the requirements specification for this homework assignment.
There are many data models one can use to model spatiotemporal trajectories. In this assignment, you will be using the raw trajectory model. A spatiotemporal trajectory, in raw trajectory model, is formally defined over a time-ordered collection of spatial geometries/objects. The spatial geometries can be any of the spatial object types, such as points, linestrings, polygons or any other complex geometry collection object.
To build trajectories, we will use a composite object type called time-geometry pairs, which is defined as follows:
tgi = (ti, gi)
Where ti is the temporal extent (a time point/timestamp or a time interval) and gi is the spatial extent representing a geometry. Then, a trajectory object (trajid) is a time-ordered collection of time-geometry pairs
trajid = [tg0, tg1, ... , tgk] or
trajid = [(t0, g0), (t1, g1), ... , (tk, gk)]
such that
foreachti ≠tj ↔i≠jand
ti < ti+1 or (ti.end ≤ ti+1.start if applicable)
This means, there is no temporal overlap allowed between time extent of the discretely represented time-geometry pairs and temporal objects have a total order.
Grid-mapped interval trees (G-IT) index is a simple trajectory access mechanism primarily designated for historical persistent spatiotemporal data. The index is built mainly upon a spatial grid to partition the spatial dimension and each grid cell has a pointer to an R-tree based interval tree index. Interval trees often refer to degenerate R-trees, which means instead of indexing 2-dimensional space, they are used for indexing 1 dimension (which is often time intervals). There are many R-tree implementations available in Python. You can use any of these. You can implement one yourself, or use various other interval tree variants (they may be called Nested Containment List, STRtree, intervaltree, etc), as long as they can index and help you query intervals.
 To create the G-IT index structure, you will use a fixed spatial grid, defined using six parameters:
● sf_xmin: minimum x-coordinate value for the spatial framework
● sf_xmax: maximum x-coordinate value for the spatial framework
● sf_ymin: minimum y-coordinate value for the spatial framework
● sf_ymax: maximum y-coordinate value for the spatial framework
● Δx: step size for grid cells in x-dimension
● Δy: step size for grid cells in y-dimension
Based on these parameters, you will have an nx by ny spatial grid where,
nx = ⌈(sf_xmax-sf_xmin) / Δx⌉ ny = ⌈(sf_ymax-sf_ymin) / Δy⌉
Each of these grid cells will be associated with an interval tree, which indexes the temporal aspect (of parts of the trajectory) and stores only the trajectory identifier in their leaf nodes (instead of pointers to disk locations). The keys to be inserted to interval trees are start and end times of trajectory segments (and not the start and end times of the entire trajectory). This is because the trajectories are moving objects; therefore, a trajectory can overlap with multiple grid cells over their lifespan as the object moves. In your implementation, you are expected to design a trajectory partitioning method which will identify which segments of the trajectory overlap with which grid cells; then, insert relevant ranges to correct interval trees.
As the G-IT index can work with extended spatial types, a geometry (such as linestring, polygon or multipoint) in a time-geometry pair can span multiple grid cells as these cells are fixed. For handling the geometries spanning through multiple spatial cells, G-IT uses the duplication strategy. This means that if the geometry spans multiple cells, the interval tree associated with these cells will keep a copy of the trajectory identifier.
An example insertion is depicted in Figure 1. The trajectory given there has four time-geometry pairs.
● At t1, the geometry g1 intersects with cell(y3, x1)
● At t2, the geometry g2 intersects with cell(y3, x1) and cell(y4, x1)
● At t3, the geometry g3 intersects with cell(y4, x1)
● At t4, the geometry g4 intersects with cell(y4, x2)
Therefore, the identifier of the trajectory (say traj.id) is inserted to the relevant interval trees (IT) with following time range keys:

 ● Insert (key: (t1:t2), value: traj.id) to IT@cell(y3, x1)
● Insert (key: (t2:t3), value: traj.id) to IT@cell(y4, x1)
● Insert (key: (t4:t4), value: traj.id) to IT@cell(y4, x2)
 Figure 1: An example insertion to Grid-mapped Interval Trees (Aydin et al. 2016, DOI: 10.4018/978-1-4666-9834-5.ch006)
You will be given a test dataset along with a reader. You can use spatial analysis libraries (such as shapely or Geopandas) in Python. Please implement the following:
1. Implement a trajectory class that can store spatiotemporal trajectories as defined above. 2. Create a G-IT index implementation that will support the following functionalities.
● Insertion: Insert a trajectory object to the index structure
● Deletion by id: Remove a trajectory using its identifier.

● Spatial window query: Given two coordinates (i.e., (x1, y1), (x2, y2)) that will represent a bounding box (envelope), find all trajectory identifiers that spatially overlap with the given box.
● Temporal window query: Given two (ordered) time points (t1, t2) which represent a time range, find all trajectory identifiers that temporally overlap with the given temporal range.
● Spatio-temporal window query: Given an envelope (defined using two coordinates, as in the spatial window query) and a time range (defined using two time points, as in the temporal query), find all trajectory identifiers that both spatially and temporally overlap with the given envelope and time range.
You are expected to submit at least four files (please make sure you comment your code):
● GIT.py: Implementation for G-IT Index
● Trajectory.py: Implementation for trajectory data type
● TestGIT.py: Insert toy dataset into a G-IT index instance, then create two test cases
for each query and show your results
● README: A readme file detailing how to run your code